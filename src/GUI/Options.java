/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Hardware.Controls;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import kyle.emulator.KyleEmulator;

/**
 *
 * @author James
 */
public class Options extends javax.swing.JFrame {
    private final Controls controls;
    /**
     * Creates new form Options
     */
    public Options() {
        initComponents();
        controls = KyleEmulator.getEmulator().getControls();
        BIOSUrl.setText(KyleEmulator.getEmulator().getBiosUrl());
        UP.setText("UP: " + getKeyText(controls.getUP()));
        DOWN.setText("DOWN: " + getKeyText(controls.getDOWN()));
        LEFT.setText("LEFT: " + getKeyText(controls.getLEFT()));
        RIGHT.setText("RIGHT: " + getKeyText(controls.getRIGHT()));
        A.setText("A: " + getKeyText(controls.getA()));
        B.setText("B: " + getKeyText(controls.getB()));
        LTRIG.setText("LEFT TRIGGER: " + getKeyText(controls.getLTRIG()));
        RTRIG.setText("RIGHT TRIGGER: " + getKeyText(controls.getRTRIG()));
        START.setText("START: " + getKeyText(controls.getSTART()));
        SELECT.setText("SELECT: " + getKeyText(controls.getSELECT()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BIOSUrl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        UP = new javax.swing.JLabel();
        LEFT = new javax.swing.JLabel();
        RIGHT = new javax.swing.JLabel();
        DOWN = new javax.swing.JLabel();
        A = new javax.swing.JLabel();
        B = new javax.swing.JLabel();
        START = new javax.swing.JLabel();
        SELECT = new javax.swing.JLabel();
        LTRIG = new javax.swing.JLabel();
        RTRIG = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setResizable(false);

        BIOSUrl.setEditable(false);

        jLabel1.setText("BIOS file:");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Controls:");

        UP.setText("UP:");
        UP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UPMouseClicked(evt);
            }
        });
        UP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UPKeyPressed(evt);
            }
        });

        LEFT.setText("LEFT:");
        LEFT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LEFTMouseClicked(evt);
            }
        });
        LEFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LEFTKeyPressed(evt);
            }
        });

        RIGHT.setText("RIGHT:");
        RIGHT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RIGHTMouseClicked(evt);
            }
        });
        RIGHT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RIGHTKeyPressed(evt);
            }
        });

        DOWN.setText("DOWN:");
        DOWN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DOWNMouseClicked(evt);
            }
        });
        DOWN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DOWNKeyPressed(evt);
            }
        });

        A.setText("A:");
        A.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AMouseClicked(evt);
            }
        });
        A.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AKeyPressed(evt);
            }
        });

        B.setText("B:");
        B.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BMouseClicked(evt);
            }
        });
        B.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BKeyPressed(evt);
            }
        });

        START.setText("START:");
        START.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                STARTMouseClicked(evt);
            }
        });
        START.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                STARTKeyPressed(evt);
            }
        });

        SELECT.setText("SELECT:");
        SELECT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SELECTMouseClicked(evt);
            }
        });
        SELECT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SELECTKeyPressed(evt);
            }
        });

        LTRIG.setText("LEFT TRIG:");
        LTRIG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LTRIGMouseClicked(evt);
            }
        });
        LTRIG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LTRIGKeyPressed(evt);
            }
        });

        RTRIG.setText("RIGHT TRIG:");
        RTRIG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RTRIGMouseClicked(evt);
            }
        });
        RTRIG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RTRIGKeyPressed(evt);
            }
        });

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BIOSUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DOWN)
                                    .addComponent(UP)
                                    .addComponent(LEFT)
                                    .addComponent(RIGHT)
                                    .addComponent(LTRIG)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(A)
                            .addComponent(START)
                            .addComponent(B)
                            .addComponent(SELECT)
                            .addComponent(RTRIG)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BIOSUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UP)
                    .addComponent(A))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DOWN)
                    .addComponent(B))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LEFT)
                    .addComponent(START))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RIGHT)
                    .addComponent(SELECT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LTRIG)
                    .addComponent(RTRIG))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UPMouseClicked
        // TODO add your handling code here:
        UP.requestFocusInWindow();
        UP.setText("UP: <Press Key>");
    }//GEN-LAST:event_UPMouseClicked

    private void DOWNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DOWNMouseClicked
        // TODO add your handling code here:
        DOWN.requestFocusInWindow();
        DOWN.setText("DOWN: <Press Key>");
    }//GEN-LAST:event_DOWNMouseClicked

    private void LEFTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LEFTMouseClicked
        // TODO add your handling code here:
        LEFT.requestFocusInWindow();
        LEFT.setText("LEFT: <Press Key>");
    }//GEN-LAST:event_LEFTMouseClicked

    private void RIGHTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RIGHTMouseClicked
        // TODO add your handling code here:
        RIGHT.requestFocusInWindow();
        RIGHT.setText("RIGHT: <Press Key>");
    }//GEN-LAST:event_RIGHTMouseClicked

    private void LTRIGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LTRIGMouseClicked
        // TODO add your handling code here:
        LTRIG.requestFocusInWindow();
        LTRIG.setText("LEFT TRIGGER: <Press Key>");
    }//GEN-LAST:event_LTRIGMouseClicked

    private void AMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AMouseClicked
        // TODO add your handling code here:
        A.requestFocusInWindow();
        A.setText("A: <Press Key>");
    }//GEN-LAST:event_AMouseClicked

    private void BMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BMouseClicked
        // TODO add your handling code here:
        B.requestFocusInWindow();
        B.setText("B: <Press Key>");
    }//GEN-LAST:event_BMouseClicked

    private void STARTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_STARTMouseClicked
        // TODO add your handling code here:
        START.requestFocusInWindow();
        START.setText("START: <Press Key>");
    }//GEN-LAST:event_STARTMouseClicked

    private void SELECTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SELECTMouseClicked
        // TODO add your handling code here:
        SELECT.requestFocusInWindow();
        SELECT.setText("SELECT: <Press Key>");
    }//GEN-LAST:event_SELECTMouseClicked

    private void RTRIGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RTRIGMouseClicked
        // TODO add your handling code here:
        RTRIG.requestFocusInWindow();
        RTRIG.setText("RIGHT TRIGGER: <Press Key>");
    }//GEN-LAST:event_RTRIGMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void UPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UPKeyPressed
        // TODO add your handling code here:
        controls.setUP(evt.getKeyCode());
        UP.setText("UP: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_UPKeyPressed

    private void DOWNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DOWNKeyPressed
        // TODO add your handling code here:
        controls.setDOWN(evt.getKeyCode());
        DOWN.setText("DOWN: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_DOWNKeyPressed

    private void LEFTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LEFTKeyPressed
        // TODO add your handling code here:
        controls.setLEFT(evt.getKeyCode());
        LEFT.setText("LEFT: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_LEFTKeyPressed

    private void RIGHTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RIGHTKeyPressed
        // TODO add your handling code here:
        controls.setRIGHT(evt.getKeyCode());
        RIGHT.setText("RIGHT: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_RIGHTKeyPressed

    private void LTRIGKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LTRIGKeyPressed
        // TODO add your handling code here:
        controls.setLTRIG(evt.getKeyCode());
        LTRIG.setText("LEFT TRIGGER: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_LTRIGKeyPressed

    private void AKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AKeyPressed
        // TODO add your handling code here:
        controls.setA(evt.getKeyCode());
        A.setText("A: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_AKeyPressed

    private void BKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BKeyPressed
        // TODO add your handling code here:
        controls.setB(evt.getKeyCode());
        B.setText("B: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_BKeyPressed

    private void STARTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_STARTKeyPressed
        // TODO add your handling code here:
        controls.setSTART(evt.getKeyCode());
        START.setText("START: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_STARTKeyPressed

    private void SELECTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SELECTKeyPressed
        // TODO add your handling code here:
        controls.setSELECT(evt.getKeyCode());
        SELECT.setText("SELECT: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_SELECTKeyPressed

    private void RTRIGKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RTRIGKeyPressed
        // TODO add your handling code here:
        controls.setRTRIG(evt.getKeyCode());
        RTRIG.setText("RIGHT TRIGGER: " + getKeyText(evt.getKeyCode()));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
    }//GEN-LAST:event_RTRIGKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File f = new File("config.ini");
        if (!f.exists()) {
            try {
                f.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Options.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(f))) {
            if (!"".equals(BIOSUrl.getText())) {
                bw.write(BIOSUrl.getText());
            }else {
                bw.write("null");
            }
            bw.newLine();
            bw.write(Integer.toString(controls.getUP()));//UP key
            bw.newLine();
            bw.write(Integer.toString(controls.getDOWN()));//Down key
            bw.newLine();
            bw.write(Integer.toString(controls.getLEFT()));//Left key
            bw.newLine();
            bw.write(Integer.toString(controls.getRIGHT()));//Right key
            bw.newLine();
            bw.write(Integer.toString(controls.getA()));//A key
            bw.newLine();
            bw.write(Integer.toString(controls.getB()));//B key
            bw.newLine();
            bw.write(Integer.toString(controls.getSTART()));//Start key
            bw.newLine();
            bw.write(Integer.toString(controls.getSELECT()));//Select key
            bw.newLine();
            bw.write(Integer.toString(controls.getLTRIG()));//Left Trigger
            bw.newLine();
            bw.write(Integer.toString(controls.getRTRIG()));//Right Trigger
            bw.newLine();
        } catch (IOException ex) {
            Logger.getLogger(Options.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser FC = new JFileChooser();
        if(FC.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            BIOSUrl.setText(FC.getSelectedFile().getAbsolutePath());
            KyleEmulator.getEmulator().getMemory().loadBIOS(new File(BIOSUrl.getText()));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Options.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Options().setVisible(true);
        });
    }
    
    private static String getKeyText(int keyCode) {
        if (keyCode >= KeyEvent.VK_0 && keyCode <= KeyEvent.VK_9 || keyCode >= KeyEvent.VK_A
                && keyCode <= KeyEvent.VK_Z) {
            return String.valueOf((char) keyCode);
        }
        switch (keyCode) {
            case KeyEvent.VK_COMMA:
                return "COMMA";
            case KeyEvent.VK_PERIOD:
                return "PERIOD";
            case KeyEvent.VK_SLASH:
                return "SLASH";
            case KeyEvent.VK_SEMICOLON:
                return "SEMICOLON";
            case KeyEvent.VK_EQUALS:
                return "EQUALS";
            case KeyEvent.VK_OPEN_BRACKET:
                return "OPEN_BRACKET";
            case KeyEvent.VK_BACK_SLASH:
                return "BACK_SLASH";
            case KeyEvent.VK_CLOSE_BRACKET:
                return "CLOSE_BRACKET";
            case KeyEvent.VK_ENTER:
                return "ENTER";
            case KeyEvent.VK_BACK_SPACE:
                return "BACK_SPACE";
            case KeyEvent.VK_TAB:
                return "TAB";
            case KeyEvent.VK_CANCEL:
                return "CANCEL";
            case KeyEvent.VK_CLEAR:
                return "CLEAR";
            case KeyEvent.VK_SHIFT:
                return "SHIFT";
            case KeyEvent.VK_CONTROL:
                return "CONTROL";
            case KeyEvent.VK_ALT:
                return "ALT";
            case KeyEvent.VK_PAUSE:
                return "PAUSE";
            case KeyEvent.VK_CAPS_LOCK:
                return "CAPS_LOCK";
            case KeyEvent.VK_ESCAPE:
                return "ESCAPE";
            case KeyEvent.VK_SPACE:
                return "SPACE";
            case KeyEvent.VK_PAGE_UP:
                return "PAGE_UP";
            case KeyEvent.VK_PAGE_DOWN:
                return "PAGE_DOWN";
            case KeyEvent.VK_END:
                return "END";
            case KeyEvent.VK_HOME:
                return "HOME";
            case KeyEvent.VK_LEFT:
                return "LEFT";
            case KeyEvent.VK_UP:
                return "UP";
            case KeyEvent.VK_RIGHT:
                return "RIGHT";
            case KeyEvent.VK_DOWN:
                return "DOWN";
            case KeyEvent.VK_MULTIPLY:
                return "MULTIPLY";
            case KeyEvent.VK_ADD:
                return "ADD";
            case KeyEvent.VK_SEPARATOR:
                return "SEPARATOR";
            case KeyEvent.VK_SUBTRACT:
                return "SUBTRACT";
            case KeyEvent.VK_DECIMAL:
                return "DECIMAL";
            case KeyEvent.VK_DIVIDE:
                return "DIVIDE";
            case KeyEvent.VK_DELETE:
                return "DELETE";
            case KeyEvent.VK_NUM_LOCK:
                return "NUM_LOCK";
            case KeyEvent.VK_SCROLL_LOCK:
                return "SCROLL_LOCK";
            case KeyEvent.VK_F1:
                return "F1";
            case KeyEvent.VK_F2:
                return "F2";
            case KeyEvent.VK_F3:
                return "F3";
            case KeyEvent.VK_F4:
                return "F4";
            case KeyEvent.VK_F5:
                return "F5";
            case KeyEvent.VK_F6:
                return "F6";
            case KeyEvent.VK_F7:
                return "F7";
            case KeyEvent.VK_F8:
                return "F8";
            case KeyEvent.VK_F9:
                return "F9";
            case KeyEvent.VK_F10:
                return "F10";
            case KeyEvent.VK_F11:
                return "F11";
            case KeyEvent.VK_F12:
                return "F12";
            case KeyEvent.VK_F13:
                return "F13";
            case KeyEvent.VK_F14:
                return "F14";
            case KeyEvent.VK_F15:
                return "F15";
            case KeyEvent.VK_F16:
                return "F16";
            case KeyEvent.VK_F17:
                return "F17";
            case KeyEvent.VK_F18:
                return "F18";
            case KeyEvent.VK_F19:
                return "F19";
            case KeyEvent.VK_F20:
                return "F20";
            case KeyEvent.VK_F21:
                return "F21";
            case KeyEvent.VK_F22:
                return "F22";
            case KeyEvent.VK_F23:
                return "F23";
            case KeyEvent.VK_F24:
                return "F24";
            case KeyEvent.VK_PRINTSCREEN:
                return "PRINTSCREEN";
            case KeyEvent.VK_INSERT:
                return "INSERT";
            case KeyEvent.VK_HELP:
                return "HELP";
            case KeyEvent.VK_META:
                return "META";
            case KeyEvent.VK_BACK_QUOTE:
                return "BACK_QUOTE";
            case KeyEvent.VK_QUOTE:
                return "QUOTE";
            case KeyEvent.VK_KP_UP:
                return "KP_UP";
            case KeyEvent.VK_KP_DOWN:
                return "KP_DOWN";
            case KeyEvent.VK_KP_LEFT:
                return "KP_LEFT";
            case KeyEvent.VK_KP_RIGHT:
                return "KP_RIGHT";
            case KeyEvent.VK_DEAD_GRAVE:
                return "DEAD_GRAVE";
            case KeyEvent.VK_DEAD_ACUTE:
                return "DEAD_ACUTE";
            case KeyEvent.VK_DEAD_CIRCUMFLEX:
                return "DEAD_CIRCUMFLEX";
            case KeyEvent.VK_DEAD_TILDE:
                return "DEAD_TILDE";
            case KeyEvent.VK_DEAD_MACRON:
                return "DEAD_MACRON";
            case KeyEvent.VK_DEAD_BREVE:
                return "DEAD_BREVE";
            case KeyEvent.VK_DEAD_ABOVEDOT:
                return "DEAD_ABOVEDOT";
            case KeyEvent.VK_DEAD_DIAERESIS:
                return "DEAD_DIAERESIS";
            case KeyEvent.VK_DEAD_ABOVERING:
                return "DEAD_ABOVERING";
            case KeyEvent.VK_DEAD_DOUBLEACUTE:
                return "DEAD_DOUBLEACUTE";
            case KeyEvent.VK_DEAD_CARON:
                return "DEAD_CARON";
            case KeyEvent.VK_DEAD_CEDILLA:
                return "DEAD_CEDILLA";
            case KeyEvent.VK_DEAD_OGONEK:
                return "DEAD_OGONEK";
            case KeyEvent.VK_DEAD_IOTA:
                return "DEAD_IOTA";
            case KeyEvent.VK_DEAD_VOICED_SOUND:
                return "DEAD_VOICED_SOUND";
            case KeyEvent.VK_DEAD_SEMIVOICED_SOUND:
                return "DEAD_SEMIVOICED_SOUND";
            case KeyEvent.VK_AMPERSAND:
                return "AMPERSAND";
            case KeyEvent.VK_ASTERISK:
                return "ASTERISK";
            case KeyEvent.VK_QUOTEDBL:
                return "QUOTEDBL";
            case KeyEvent.VK_LESS:
                return "LESS";
            case KeyEvent.VK_GREATER:
                return "GREATER";
            case KeyEvent.VK_BRACELEFT:
                return "BRACELEFT";
            case KeyEvent.VK_BRACERIGHT:
                return "BRACERIGHT";
            case KeyEvent.VK_AT:
                return "AT";
            case KeyEvent.VK_COLON:
                return "COLON";
            case KeyEvent.VK_CIRCUMFLEX:
                return "CIRCUMFLEX";
            case KeyEvent.VK_DOLLAR:
                return "DOLLAR";
            case KeyEvent.VK_EURO_SIGN:
                return "EURO_SIGN";
            case KeyEvent.VK_EXCLAMATION_MARK:
                return "EXCLAMATION_MARK";
            case KeyEvent.VK_INVERTED_EXCLAMATION_MARK:
                return "INVERTED_EXCLAMATION_MARK";
            case KeyEvent.VK_LEFT_PARENTHESIS:
                return "LEFT_PARENTHESIS";
            case KeyEvent.VK_NUMBER_SIGN:
                return "NUMBER_SIGN";
            case KeyEvent.VK_MINUS:
                return "MINUS";
            case KeyEvent.VK_PLUS:
                return "PLUS";
            case KeyEvent.VK_RIGHT_PARENTHESIS:
                return "RIGHT_PARENTHESIS";
            case KeyEvent.VK_UNDERSCORE:
                return "UNDERSCORE";
            case KeyEvent.VK_FINAL:
                return "FINAL";
            case KeyEvent.VK_CONVERT:
                return "CONVERT";
            case KeyEvent.VK_NONCONVERT:
                return "NONCONVERT";
            case KeyEvent.VK_ACCEPT:
                return "ACCEPT";
            case KeyEvent.VK_MODECHANGE:
                return "MODECHANGE";
            case KeyEvent.VK_KANA:
                return "KANA";
            case KeyEvent.VK_KANJI:
                return "KANJI";
            case KeyEvent.VK_ALPHANUMERIC:
                return "ALPHANUMERIC";
            case KeyEvent.VK_KATAKANA:
                return "KATAKANA";
            case KeyEvent.VK_HIRAGANA:
                return "HIRAGANA";
            case KeyEvent.VK_FULL_WIDTH:
                return "FULL_WIDTH";
            case KeyEvent.VK_HALF_WIDTH:
                return "HALF_WIDTH";
            case KeyEvent.VK_ROMAN_CHARACTERS:
                return "ROMAN_CHARACTERS";
            case KeyEvent.VK_ALL_CANDIDATES:
                return "ALL_CANDIDATES";
            case KeyEvent.VK_PREVIOUS_CANDIDATE:
                return "PREVIOUS_CANDIDATE";
            case KeyEvent.VK_CODE_INPUT:
                return "CODE_INPUT";
            case KeyEvent.VK_JAPANESE_KATAKANA:
                return "JAPANESE_KATAKANA";
            case KeyEvent.VK_JAPANESE_HIRAGANA:
                return "JAPANESE_HIRAGANA";
            case KeyEvent.VK_JAPANESE_ROMAN:
                return "JAPANESE_ROMAN";
            case KeyEvent.VK_KANA_LOCK:
                return "KANA_LOCK";
            case KeyEvent.VK_INPUT_METHOD_ON_OFF:
                return "INPUT_METHOD_ON_OFF";
            case KeyEvent.VK_AGAIN:
                return "AGAIN";
            case KeyEvent.VK_UNDO:
                return "UNDO";
            case KeyEvent.VK_COPY:
                return "COPY";
            case KeyEvent.VK_PASTE:
                return "PASTE";
            case KeyEvent.VK_CUT:
                return "CUT";
            case KeyEvent.VK_FIND:
                return "FIND";
            case KeyEvent.VK_PROPS:
                return "PROPS";
            case KeyEvent.VK_STOP:
                return "STOP";
            case KeyEvent.VK_COMPOSE:
                return "COMPOSE";
            case KeyEvent.VK_ALT_GRAPH:
                return "ALT_GRAPH";
        }
        if (keyCode >= KeyEvent.VK_NUMPAD0 && keyCode <= KeyEvent.VK_NUMPAD9) {
            char c = (char) (keyCode - KeyEvent.VK_NUMPAD0 + '0');
            return "NUMPAD" + c;
        }
        return "unknown(0x" + Integer.toString(keyCode, 16) + ")";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A;
    private javax.swing.JLabel B;
    private javax.swing.JTextField BIOSUrl;
    private javax.swing.JLabel DOWN;
    private javax.swing.JLabel LEFT;
    private javax.swing.JLabel LTRIG;
    private javax.swing.JLabel RIGHT;
    private javax.swing.JLabel RTRIG;
    private javax.swing.JLabel SELECT;
    private javax.swing.JLabel START;
    private javax.swing.JLabel UP;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
